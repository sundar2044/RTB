# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_base/VehicleBaseRes.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class VehicleBaseRes(genpy.Message):
  _md5sum = "bae689aab53c62fef1daf5a5bd9e72cc"
  _type = "vehicle_base/VehicleBaseRes"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#Name of the topic: vehicle_response
#
#Publish rate is related to the Sending command rate
#
#
#Standard metadata for higher-level flow data types
#sequence ID: consecutively increasing ID
uint32 Seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time Stamp
#Frame this data is associated with
string Frame_ID
#Battery voltage, uint: V
float32 BatteryVoltage
#Battery current, uint: A
float32 BatteryCurrent
#Battery capacity, range: (0 - 1) ---- (0% - 100%)
float32 BatteryCapacity
#Battery remaining, uint: Ah
float32 BatteryRemaining
#Battery Temperature, uint: C
float32 BatteryTemperature
#Left motor speed, uint: km/h
float32 LeftMotorSpeed
#Left motor current, uint: A
float32 LeftMotorCurrent
#Left motor Temperature, uint: C
float32 LeftMotorTemp
#Left motor odometer, uint: km
float32 LeftMotorOdometer
#Left motor torque, uint: Nm
float32 LeftMotorTorque
#Right motor speed, uint: km/h
float32 RightMotorSpeed
#Right motor current, uint: A
float32 RightMotorCurrent
#Right motor Temperature, uint: C
float32 RightMotorTemp
#Right motor odometer, uint: km
float32 RightMotorOdometer
#Right motor torque, uint: Nm
float32 RightMotorTorque
#Current Latitude
float32 CurrentLatitude
#Current Longititude
float32 CurrentLongitude
#Compass Roll
float32 CompassRoll
#Compass Pitch
float32 CompassPitch
#Compass Yaw
float32 CompassYaw
#Remote controller Throttle value for the vehicle,range: -1.0 - 1.0 <----> -100%(reverse) ~ 100%(forward)
float32 RCThrottle
#Remote controller Steering Angle for the vehicle,range: -1.0 - 1.0 <----> -90 Degree(turn left) ~ 90 Degree(turn right)
float32 RCSteeringAngle
#Remote controller motor power: on---bigger than 0, off---0
uint8 RCMotorPower
#Remote controller Speed mode: High speed mode---bigger than 0, low speed mode---0
uint8 RCSpeedMode
#Remote controller Left brake value: on---bigger than 0, off---0
uint8 RCLeftBrake
#Remote controller Right brake value: on---bigger than 0, off---0
uint8 RCRightBrake
#Robotic Arm power: on---bigger than 0, off---0
uint8 RCRoboticArmPwr
#Navigation Command
#  
#  0x8000 ----- Cancel the navigation operation
#  0x8001 ----- Set base coordinate for the RTB
#  0x8002 ----- Start RTB
#  0x8004 ----- Pause RTB
#  0x8008 ----- Start recording the route for the RTB
#  0x8010 ----- Set Destination for the 2 Point Way Navigation
#  0x8020 ----- Start the 2 Point Way Navigation
#  0x8040 ----- Pause the 2 Point Way Navigation
#
#  0x9000 ----- Emergency Stop
#  Others ----- Nope
#
uint16 RCNavigationCmd
#Destination Latitude
float32 DestinationLatitude
#Destination Longititude
float32 DestinationLongitude

"""
  __slots__ = ['Seq','Stamp','Frame_ID','BatteryVoltage','BatteryCurrent','BatteryCapacity','BatteryRemaining','BatteryTemperature','LeftMotorSpeed','LeftMotorCurrent','LeftMotorTemp','LeftMotorOdometer','LeftMotorTorque','RightMotorSpeed','RightMotorCurrent','RightMotorTemp','RightMotorOdometer','RightMotorTorque','CurrentLatitude','CurrentLongitude','CompassRoll','CompassPitch','CompassYaw','RCThrottle','RCSteeringAngle','RCMotorPower','RCSpeedMode','RCLeftBrake','RCRightBrake','RCRoboticArmPwr','RCNavigationCmd','DestinationLatitude','DestinationLongitude']
  _slot_types = ['uint32','time','string','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','uint8','uint8','uint8','uint8','uint16','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Seq,Stamp,Frame_ID,BatteryVoltage,BatteryCurrent,BatteryCapacity,BatteryRemaining,BatteryTemperature,LeftMotorSpeed,LeftMotorCurrent,LeftMotorTemp,LeftMotorOdometer,LeftMotorTorque,RightMotorSpeed,RightMotorCurrent,RightMotorTemp,RightMotorOdometer,RightMotorTorque,CurrentLatitude,CurrentLongitude,CompassRoll,CompassPitch,CompassYaw,RCThrottle,RCSteeringAngle,RCMotorPower,RCSpeedMode,RCLeftBrake,RCRightBrake,RCRoboticArmPwr,RCNavigationCmd,DestinationLatitude,DestinationLongitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleBaseRes, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Seq is None:
        self.Seq = 0
      if self.Stamp is None:
        self.Stamp = genpy.Time()
      if self.Frame_ID is None:
        self.Frame_ID = ''
      if self.BatteryVoltage is None:
        self.BatteryVoltage = 0.
      if self.BatteryCurrent is None:
        self.BatteryCurrent = 0.
      if self.BatteryCapacity is None:
        self.BatteryCapacity = 0.
      if self.BatteryRemaining is None:
        self.BatteryRemaining = 0.
      if self.BatteryTemperature is None:
        self.BatteryTemperature = 0.
      if self.LeftMotorSpeed is None:
        self.LeftMotorSpeed = 0.
      if self.LeftMotorCurrent is None:
        self.LeftMotorCurrent = 0.
      if self.LeftMotorTemp is None:
        self.LeftMotorTemp = 0.
      if self.LeftMotorOdometer is None:
        self.LeftMotorOdometer = 0.
      if self.LeftMotorTorque is None:
        self.LeftMotorTorque = 0.
      if self.RightMotorSpeed is None:
        self.RightMotorSpeed = 0.
      if self.RightMotorCurrent is None:
        self.RightMotorCurrent = 0.
      if self.RightMotorTemp is None:
        self.RightMotorTemp = 0.
      if self.RightMotorOdometer is None:
        self.RightMotorOdometer = 0.
      if self.RightMotorTorque is None:
        self.RightMotorTorque = 0.
      if self.CurrentLatitude is None:
        self.CurrentLatitude = 0.
      if self.CurrentLongitude is None:
        self.CurrentLongitude = 0.
      if self.CompassRoll is None:
        self.CompassRoll = 0.
      if self.CompassPitch is None:
        self.CompassPitch = 0.
      if self.CompassYaw is None:
        self.CompassYaw = 0.
      if self.RCThrottle is None:
        self.RCThrottle = 0.
      if self.RCSteeringAngle is None:
        self.RCSteeringAngle = 0.
      if self.RCMotorPower is None:
        self.RCMotorPower = 0
      if self.RCSpeedMode is None:
        self.RCSpeedMode = 0
      if self.RCLeftBrake is None:
        self.RCLeftBrake = 0
      if self.RCRightBrake is None:
        self.RCRightBrake = 0
      if self.RCRoboticArmPwr is None:
        self.RCRoboticArmPwr = 0
      if self.RCNavigationCmd is None:
        self.RCNavigationCmd = 0
      if self.DestinationLatitude is None:
        self.DestinationLatitude = 0.
      if self.DestinationLongitude is None:
        self.DestinationLongitude = 0.
    else:
      self.Seq = 0
      self.Stamp = genpy.Time()
      self.Frame_ID = ''
      self.BatteryVoltage = 0.
      self.BatteryCurrent = 0.
      self.BatteryCapacity = 0.
      self.BatteryRemaining = 0.
      self.BatteryTemperature = 0.
      self.LeftMotorSpeed = 0.
      self.LeftMotorCurrent = 0.
      self.LeftMotorTemp = 0.
      self.LeftMotorOdometer = 0.
      self.LeftMotorTorque = 0.
      self.RightMotorSpeed = 0.
      self.RightMotorCurrent = 0.
      self.RightMotorTemp = 0.
      self.RightMotorOdometer = 0.
      self.RightMotorTorque = 0.
      self.CurrentLatitude = 0.
      self.CurrentLongitude = 0.
      self.CompassRoll = 0.
      self.CompassPitch = 0.
      self.CompassYaw = 0.
      self.RCThrottle = 0.
      self.RCSteeringAngle = 0.
      self.RCMotorPower = 0
      self.RCSpeedMode = 0
      self.RCLeftBrake = 0
      self.RCRightBrake = 0
      self.RCRoboticArmPwr = 0
      self.RCNavigationCmd = 0
      self.DestinationLatitude = 0.
      self.DestinationLongitude = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.Seq, _x.Stamp.secs, _x.Stamp.nsecs))
      _x = self.Frame_ID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_22f5BH2f.pack(_x.BatteryVoltage, _x.BatteryCurrent, _x.BatteryCapacity, _x.BatteryRemaining, _x.BatteryTemperature, _x.LeftMotorSpeed, _x.LeftMotorCurrent, _x.LeftMotorTemp, _x.LeftMotorOdometer, _x.LeftMotorTorque, _x.RightMotorSpeed, _x.RightMotorCurrent, _x.RightMotorTemp, _x.RightMotorOdometer, _x.RightMotorTorque, _x.CurrentLatitude, _x.CurrentLongitude, _x.CompassRoll, _x.CompassPitch, _x.CompassYaw, _x.RCThrottle, _x.RCSteeringAngle, _x.RCMotorPower, _x.RCSpeedMode, _x.RCLeftBrake, _x.RCRightBrake, _x.RCRoboticArmPwr, _x.RCNavigationCmd, _x.DestinationLatitude, _x.DestinationLongitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Stamp is None:
        self.Stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Seq, _x.Stamp.secs, _x.Stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Frame_ID = str[start:end].decode('utf-8')
      else:
        self.Frame_ID = str[start:end]
      _x = self
      start = end
      end += 103
      (_x.BatteryVoltage, _x.BatteryCurrent, _x.BatteryCapacity, _x.BatteryRemaining, _x.BatteryTemperature, _x.LeftMotorSpeed, _x.LeftMotorCurrent, _x.LeftMotorTemp, _x.LeftMotorOdometer, _x.LeftMotorTorque, _x.RightMotorSpeed, _x.RightMotorCurrent, _x.RightMotorTemp, _x.RightMotorOdometer, _x.RightMotorTorque, _x.CurrentLatitude, _x.CurrentLongitude, _x.CompassRoll, _x.CompassPitch, _x.CompassYaw, _x.RCThrottle, _x.RCSteeringAngle, _x.RCMotorPower, _x.RCSpeedMode, _x.RCLeftBrake, _x.RCRightBrake, _x.RCRoboticArmPwr, _x.RCNavigationCmd, _x.DestinationLatitude, _x.DestinationLongitude,) = _struct_22f5BH2f.unpack(str[start:end])
      self.Stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.Seq, _x.Stamp.secs, _x.Stamp.nsecs))
      _x = self.Frame_ID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_22f5BH2f.pack(_x.BatteryVoltage, _x.BatteryCurrent, _x.BatteryCapacity, _x.BatteryRemaining, _x.BatteryTemperature, _x.LeftMotorSpeed, _x.LeftMotorCurrent, _x.LeftMotorTemp, _x.LeftMotorOdometer, _x.LeftMotorTorque, _x.RightMotorSpeed, _x.RightMotorCurrent, _x.RightMotorTemp, _x.RightMotorOdometer, _x.RightMotorTorque, _x.CurrentLatitude, _x.CurrentLongitude, _x.CompassRoll, _x.CompassPitch, _x.CompassYaw, _x.RCThrottle, _x.RCSteeringAngle, _x.RCMotorPower, _x.RCSpeedMode, _x.RCLeftBrake, _x.RCRightBrake, _x.RCRoboticArmPwr, _x.RCNavigationCmd, _x.DestinationLatitude, _x.DestinationLongitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Stamp is None:
        self.Stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Seq, _x.Stamp.secs, _x.Stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Frame_ID = str[start:end].decode('utf-8')
      else:
        self.Frame_ID = str[start:end]
      _x = self
      start = end
      end += 103
      (_x.BatteryVoltage, _x.BatteryCurrent, _x.BatteryCapacity, _x.BatteryRemaining, _x.BatteryTemperature, _x.LeftMotorSpeed, _x.LeftMotorCurrent, _x.LeftMotorTemp, _x.LeftMotorOdometer, _x.LeftMotorTorque, _x.RightMotorSpeed, _x.RightMotorCurrent, _x.RightMotorTemp, _x.RightMotorOdometer, _x.RightMotorTorque, _x.CurrentLatitude, _x.CurrentLongitude, _x.CompassRoll, _x.CompassPitch, _x.CompassYaw, _x.RCThrottle, _x.RCSteeringAngle, _x.RCMotorPower, _x.RCSpeedMode, _x.RCLeftBrake, _x.RCRightBrake, _x.RCRoboticArmPwr, _x.RCNavigationCmd, _x.DestinationLatitude, _x.DestinationLongitude,) = _struct_22f5BH2f.unpack(str[start:end])
      self.Stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_22f5BH2f = struct.Struct("<22f5BH2f")
