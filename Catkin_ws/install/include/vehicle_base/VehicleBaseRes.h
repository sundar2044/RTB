// Generated by gencpp from file vehicle_base/VehicleBaseRes.msg
// DO NOT EDIT!


#ifndef VEHICLE_BASE_MESSAGE_VEHICLEBASERES_H
#define VEHICLE_BASE_MESSAGE_VEHICLEBASERES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_base
{
template <class ContainerAllocator>
struct VehicleBaseRes_
{
  typedef VehicleBaseRes_<ContainerAllocator> Type;

  VehicleBaseRes_()
    : Seq(0)
    , Stamp()
    , Frame_ID()
    , BatteryVoltage(0.0)
    , BatteryCurrent(0.0)
    , BatteryCapacity(0.0)
    , BatteryRemaining(0.0)
    , BatteryTemperature(0.0)
    , LeftMotorSpeed(0.0)
    , LeftMotorCurrent(0.0)
    , LeftMotorTemp(0.0)
    , LeftMotorOdometer(0.0)
    , LeftMotorTorque(0.0)
    , RightMotorSpeed(0.0)
    , RightMotorCurrent(0.0)
    , RightMotorTemp(0.0)
    , RightMotorOdometer(0.0)
    , RightMotorTorque(0.0)
    , CurrentLatitude(0.0)
    , CurrentLongitude(0.0)
    , CompassRoll(0.0)
    , CompassPitch(0.0)
    , CompassYaw(0.0)
    , RCThrottle(0.0)
    , RCSteeringAngle(0.0)
    , RCMotorPower(0)
    , RCSpeedMode(0)
    , RCLeftBrake(0)
    , RCRightBrake(0)
    , RCRoboticArmPwr(0)
    , RCNavigationCmd(0)
    , DestinationLatitude(0.0)
    , DestinationLongitude(0.0)  {
    }
  VehicleBaseRes_(const ContainerAllocator& _alloc)
    : Seq(0)
    , Stamp()
    , Frame_ID(_alloc)
    , BatteryVoltage(0.0)
    , BatteryCurrent(0.0)
    , BatteryCapacity(0.0)
    , BatteryRemaining(0.0)
    , BatteryTemperature(0.0)
    , LeftMotorSpeed(0.0)
    , LeftMotorCurrent(0.0)
    , LeftMotorTemp(0.0)
    , LeftMotorOdometer(0.0)
    , LeftMotorTorque(0.0)
    , RightMotorSpeed(0.0)
    , RightMotorCurrent(0.0)
    , RightMotorTemp(0.0)
    , RightMotorOdometer(0.0)
    , RightMotorTorque(0.0)
    , CurrentLatitude(0.0)
    , CurrentLongitude(0.0)
    , CompassRoll(0.0)
    , CompassPitch(0.0)
    , CompassYaw(0.0)
    , RCThrottle(0.0)
    , RCSteeringAngle(0.0)
    , RCMotorPower(0)
    , RCSpeedMode(0)
    , RCLeftBrake(0)
    , RCRightBrake(0)
    , RCRoboticArmPwr(0)
    , RCNavigationCmd(0)
    , DestinationLatitude(0.0)
    , DestinationLongitude(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _Seq_type;
  _Seq_type Seq;

   typedef ros::Time _Stamp_type;
  _Stamp_type Stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Frame_ID_type;
  _Frame_ID_type Frame_ID;

   typedef float _BatteryVoltage_type;
  _BatteryVoltage_type BatteryVoltage;

   typedef float _BatteryCurrent_type;
  _BatteryCurrent_type BatteryCurrent;

   typedef float _BatteryCapacity_type;
  _BatteryCapacity_type BatteryCapacity;

   typedef float _BatteryRemaining_type;
  _BatteryRemaining_type BatteryRemaining;

   typedef float _BatteryTemperature_type;
  _BatteryTemperature_type BatteryTemperature;

   typedef float _LeftMotorSpeed_type;
  _LeftMotorSpeed_type LeftMotorSpeed;

   typedef float _LeftMotorCurrent_type;
  _LeftMotorCurrent_type LeftMotorCurrent;

   typedef float _LeftMotorTemp_type;
  _LeftMotorTemp_type LeftMotorTemp;

   typedef float _LeftMotorOdometer_type;
  _LeftMotorOdometer_type LeftMotorOdometer;

   typedef float _LeftMotorTorque_type;
  _LeftMotorTorque_type LeftMotorTorque;

   typedef float _RightMotorSpeed_type;
  _RightMotorSpeed_type RightMotorSpeed;

   typedef float _RightMotorCurrent_type;
  _RightMotorCurrent_type RightMotorCurrent;

   typedef float _RightMotorTemp_type;
  _RightMotorTemp_type RightMotorTemp;

   typedef float _RightMotorOdometer_type;
  _RightMotorOdometer_type RightMotorOdometer;

   typedef float _RightMotorTorque_type;
  _RightMotorTorque_type RightMotorTorque;

   typedef float _CurrentLatitude_type;
  _CurrentLatitude_type CurrentLatitude;

   typedef float _CurrentLongitude_type;
  _CurrentLongitude_type CurrentLongitude;

   typedef float _CompassRoll_type;
  _CompassRoll_type CompassRoll;

   typedef float _CompassPitch_type;
  _CompassPitch_type CompassPitch;

   typedef float _CompassYaw_type;
  _CompassYaw_type CompassYaw;

   typedef float _RCThrottle_type;
  _RCThrottle_type RCThrottle;

   typedef float _RCSteeringAngle_type;
  _RCSteeringAngle_type RCSteeringAngle;

   typedef uint8_t _RCMotorPower_type;
  _RCMotorPower_type RCMotorPower;

   typedef uint8_t _RCSpeedMode_type;
  _RCSpeedMode_type RCSpeedMode;

   typedef uint8_t _RCLeftBrake_type;
  _RCLeftBrake_type RCLeftBrake;

   typedef uint8_t _RCRightBrake_type;
  _RCRightBrake_type RCRightBrake;

   typedef uint8_t _RCRoboticArmPwr_type;
  _RCRoboticArmPwr_type RCRoboticArmPwr;

   typedef uint16_t _RCNavigationCmd_type;
  _RCNavigationCmd_type RCNavigationCmd;

   typedef float _DestinationLatitude_type;
  _DestinationLatitude_type DestinationLatitude;

   typedef float _DestinationLongitude_type;
  _DestinationLongitude_type DestinationLongitude;




  typedef boost::shared_ptr< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleBaseRes_

typedef ::vehicle_base::VehicleBaseRes_<std::allocator<void> > VehicleBaseRes;

typedef boost::shared_ptr< ::vehicle_base::VehicleBaseRes > VehicleBaseResPtr;
typedef boost::shared_ptr< ::vehicle_base::VehicleBaseRes const> VehicleBaseResConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_base::VehicleBaseRes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_base

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'vehicle_base': ['/home/jeff/RTB/Catkin_ws/src/vehicle_base/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bae689aab53c62fef1daf5a5bd9e72cc";
  }

  static const char* value(const ::vehicle_base::VehicleBaseRes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbae689aab53c62feULL;
  static const uint64_t static_value2 = 0xf1daf5a5bd9e72ccULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_base/VehicleBaseRes";
  }

  static const char* value(const ::vehicle_base::VehicleBaseRes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Name of the topic: vehicle_response\n\
#\n\
#Publish rate is related to the Sending command rate\n\
#\n\
#\n\
#Standard metadata for higher-level flow data types\n\
#sequence ID: consecutively increasing ID\n\
uint32 Seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time Stamp\n\
#Frame this data is associated with\n\
string Frame_ID\n\
#Battery voltage, uint: V\n\
float32 BatteryVoltage\n\
#Battery current, uint: A\n\
float32 BatteryCurrent\n\
#Battery capacity, range: (0 - 1) ---- (0% - 100%)\n\
float32 BatteryCapacity\n\
#Battery remaining, uint: Ah\n\
float32 BatteryRemaining\n\
#Battery Temperature, uint: C\n\
float32 BatteryTemperature\n\
#Left motor speed, uint: km/h\n\
float32 LeftMotorSpeed\n\
#Left motor current, uint: A\n\
float32 LeftMotorCurrent\n\
#Left motor Temperature, uint: C\n\
float32 LeftMotorTemp\n\
#Left motor odometer, uint: km\n\
float32 LeftMotorOdometer\n\
#Left motor torque, uint: Nm\n\
float32 LeftMotorTorque\n\
#Right motor speed, uint: km/h\n\
float32 RightMotorSpeed\n\
#Right motor current, uint: A\n\
float32 RightMotorCurrent\n\
#Right motor Temperature, uint: C\n\
float32 RightMotorTemp\n\
#Right motor odometer, uint: km\n\
float32 RightMotorOdometer\n\
#Right motor torque, uint: Nm\n\
float32 RightMotorTorque\n\
#Current Latitude\n\
float32 CurrentLatitude\n\
#Current Longititude\n\
float32 CurrentLongitude\n\
#Compass Roll\n\
float32 CompassRoll\n\
#Compass Pitch\n\
float32 CompassPitch\n\
#Compass Yaw\n\
float32 CompassYaw\n\
#Remote controller Throttle value for the vehicle,range: -1.0 - 1.0 <----> -100%(reverse) ~ 100%(forward)\n\
float32 RCThrottle\n\
#Remote controller Steering Angle for the vehicle,range: -1.0 - 1.0 <----> -90 Degree(turn left) ~ 90 Degree(turn right)\n\
float32 RCSteeringAngle\n\
#Remote controller motor power: on---bigger than 0, off---0\n\
uint8 RCMotorPower\n\
#Remote controller Speed mode: High speed mode---bigger than 0, low speed mode---0\n\
uint8 RCSpeedMode\n\
#Remote controller Left brake value: on---bigger than 0, off---0\n\
uint8 RCLeftBrake\n\
#Remote controller Right brake value: on---bigger than 0, off---0\n\
uint8 RCRightBrake\n\
#Robotic Arm power: on---bigger than 0, off---0\n\
uint8 RCRoboticArmPwr\n\
#Navigation Command\n\
#  \n\
#  0x8000 ----- Cancel the navigation operation\n\
#  0x8001 ----- Set base coordinate for the RTB\n\
#  0x8002 ----- Start RTB\n\
#  0x8004 ----- Pause RTB\n\
#  0x8008 ----- Start recording the route for the RTB\n\
#  0x8010 ----- Set Destination for the 2 Point Way Navigation\n\
#  0x8020 ----- Start the 2 Point Way Navigation\n\
#  0x8040 ----- Pause the 2 Point Way Navigation\n\
#\n\
#  0x9000 ----- Emergency Stop\n\
#  Others ----- Nope\n\
#\n\
uint16 RCNavigationCmd\n\
#Destination Latitude\n\
float32 DestinationLatitude\n\
#Destination Longititude\n\
float32 DestinationLongitude\n\
\n\
";
  }

  static const char* value(const ::vehicle_base::VehicleBaseRes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Seq);
      stream.next(m.Stamp);
      stream.next(m.Frame_ID);
      stream.next(m.BatteryVoltage);
      stream.next(m.BatteryCurrent);
      stream.next(m.BatteryCapacity);
      stream.next(m.BatteryRemaining);
      stream.next(m.BatteryTemperature);
      stream.next(m.LeftMotorSpeed);
      stream.next(m.LeftMotorCurrent);
      stream.next(m.LeftMotorTemp);
      stream.next(m.LeftMotorOdometer);
      stream.next(m.LeftMotorTorque);
      stream.next(m.RightMotorSpeed);
      stream.next(m.RightMotorCurrent);
      stream.next(m.RightMotorTemp);
      stream.next(m.RightMotorOdometer);
      stream.next(m.RightMotorTorque);
      stream.next(m.CurrentLatitude);
      stream.next(m.CurrentLongitude);
      stream.next(m.CompassRoll);
      stream.next(m.CompassPitch);
      stream.next(m.CompassYaw);
      stream.next(m.RCThrottle);
      stream.next(m.RCSteeringAngle);
      stream.next(m.RCMotorPower);
      stream.next(m.RCSpeedMode);
      stream.next(m.RCLeftBrake);
      stream.next(m.RCRightBrake);
      stream.next(m.RCRoboticArmPwr);
      stream.next(m.RCNavigationCmd);
      stream.next(m.DestinationLatitude);
      stream.next(m.DestinationLongitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleBaseRes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_base::VehicleBaseRes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_base::VehicleBaseRes_<ContainerAllocator>& v)
  {
    s << indent << "Seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Seq);
    s << indent << "Stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.Stamp);
    s << indent << "Frame_ID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Frame_ID);
    s << indent << "BatteryVoltage: ";
    Printer<float>::stream(s, indent + "  ", v.BatteryVoltage);
    s << indent << "BatteryCurrent: ";
    Printer<float>::stream(s, indent + "  ", v.BatteryCurrent);
    s << indent << "BatteryCapacity: ";
    Printer<float>::stream(s, indent + "  ", v.BatteryCapacity);
    s << indent << "BatteryRemaining: ";
    Printer<float>::stream(s, indent + "  ", v.BatteryRemaining);
    s << indent << "BatteryTemperature: ";
    Printer<float>::stream(s, indent + "  ", v.BatteryTemperature);
    s << indent << "LeftMotorSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.LeftMotorSpeed);
    s << indent << "LeftMotorCurrent: ";
    Printer<float>::stream(s, indent + "  ", v.LeftMotorCurrent);
    s << indent << "LeftMotorTemp: ";
    Printer<float>::stream(s, indent + "  ", v.LeftMotorTemp);
    s << indent << "LeftMotorOdometer: ";
    Printer<float>::stream(s, indent + "  ", v.LeftMotorOdometer);
    s << indent << "LeftMotorTorque: ";
    Printer<float>::stream(s, indent + "  ", v.LeftMotorTorque);
    s << indent << "RightMotorSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.RightMotorSpeed);
    s << indent << "RightMotorCurrent: ";
    Printer<float>::stream(s, indent + "  ", v.RightMotorCurrent);
    s << indent << "RightMotorTemp: ";
    Printer<float>::stream(s, indent + "  ", v.RightMotorTemp);
    s << indent << "RightMotorOdometer: ";
    Printer<float>::stream(s, indent + "  ", v.RightMotorOdometer);
    s << indent << "RightMotorTorque: ";
    Printer<float>::stream(s, indent + "  ", v.RightMotorTorque);
    s << indent << "CurrentLatitude: ";
    Printer<float>::stream(s, indent + "  ", v.CurrentLatitude);
    s << indent << "CurrentLongitude: ";
    Printer<float>::stream(s, indent + "  ", v.CurrentLongitude);
    s << indent << "CompassRoll: ";
    Printer<float>::stream(s, indent + "  ", v.CompassRoll);
    s << indent << "CompassPitch: ";
    Printer<float>::stream(s, indent + "  ", v.CompassPitch);
    s << indent << "CompassYaw: ";
    Printer<float>::stream(s, indent + "  ", v.CompassYaw);
    s << indent << "RCThrottle: ";
    Printer<float>::stream(s, indent + "  ", v.RCThrottle);
    s << indent << "RCSteeringAngle: ";
    Printer<float>::stream(s, indent + "  ", v.RCSteeringAngle);
    s << indent << "RCMotorPower: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RCMotorPower);
    s << indent << "RCSpeedMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RCSpeedMode);
    s << indent << "RCLeftBrake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RCLeftBrake);
    s << indent << "RCRightBrake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RCRightBrake);
    s << indent << "RCRoboticArmPwr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RCRoboticArmPwr);
    s << indent << "RCNavigationCmd: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.RCNavigationCmd);
    s << indent << "DestinationLatitude: ";
    Printer<float>::stream(s, indent + "  ", v.DestinationLatitude);
    s << indent << "DestinationLongitude: ";
    Printer<float>::stream(s, indent + "  ", v.DestinationLongitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_BASE_MESSAGE_VEHICLEBASERES_H
