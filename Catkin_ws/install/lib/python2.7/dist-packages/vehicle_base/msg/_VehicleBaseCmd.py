# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_base/VehicleBaseCmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class VehicleBaseCmd(genpy.Message):
  _md5sum = "8436243e2cee53279e0d9fb27f7f5803"
  _type = "vehicle_base/VehicleBaseCmd"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#Name of the topic: vehicle_command
#
#Sending command rate should be smaller than 10 per second. Recommanded rate is 5 per second.
#
#
#Standard metadata for higher-level flow data types
#sequence ID: consecutively increasing ID
uint32 Seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time Stamp
#Frame this data is associated with
string Frame_ID
#Throttle value for the vehicle,range: -1.0 - 1.0 <----> -100%(reverse) ~ 100%(forward)
float32 Throttle
#Steering Angle for the vehicle,range: -1.0 - 1.0 <----> -90 Degree(turn left) ~ 90 Degree(turn right)
# 
# When steering angle bigger than 0.5 (45 Degree), or smaller than -0.5 (-45 Degree)
# Rotate by the center of vehicle with preset steerig angle and throttle:
# The actural steering angle wil be set to +90 or -90 degree
# The actural speed mode will be set to low speed mode
# The actural throttle wil be set to 60% (need to test this preset value)
#
float32 SteeringAngle
#Speed mode: High speed mode---bigger than 0, low speed mode---0
uint8 SpeedMode
#Left brake value: on---bigger than 0, off---0
uint8 LeftBrake
#Right brake value: on---bigger than 0, off---0
uint8 RightBrake
"""
  __slots__ = ['Seq','Stamp','Frame_ID','Throttle','SteeringAngle','SpeedMode','LeftBrake','RightBrake']
  _slot_types = ['uint32','time','string','float32','float32','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Seq,Stamp,Frame_ID,Throttle,SteeringAngle,SpeedMode,LeftBrake,RightBrake

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleBaseCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Seq is None:
        self.Seq = 0
      if self.Stamp is None:
        self.Stamp = genpy.Time()
      if self.Frame_ID is None:
        self.Frame_ID = ''
      if self.Throttle is None:
        self.Throttle = 0.
      if self.SteeringAngle is None:
        self.SteeringAngle = 0.
      if self.SpeedMode is None:
        self.SpeedMode = 0
      if self.LeftBrake is None:
        self.LeftBrake = 0
      if self.RightBrake is None:
        self.RightBrake = 0
    else:
      self.Seq = 0
      self.Stamp = genpy.Time()
      self.Frame_ID = ''
      self.Throttle = 0.
      self.SteeringAngle = 0.
      self.SpeedMode = 0
      self.LeftBrake = 0
      self.RightBrake = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.Seq, _x.Stamp.secs, _x.Stamp.nsecs))
      _x = self.Frame_ID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2f3B.pack(_x.Throttle, _x.SteeringAngle, _x.SpeedMode, _x.LeftBrake, _x.RightBrake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Stamp is None:
        self.Stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Seq, _x.Stamp.secs, _x.Stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Frame_ID = str[start:end].decode('utf-8')
      else:
        self.Frame_ID = str[start:end]
      _x = self
      start = end
      end += 11
      (_x.Throttle, _x.SteeringAngle, _x.SpeedMode, _x.LeftBrake, _x.RightBrake,) = _struct_2f3B.unpack(str[start:end])
      self.Stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.Seq, _x.Stamp.secs, _x.Stamp.nsecs))
      _x = self.Frame_ID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2f3B.pack(_x.Throttle, _x.SteeringAngle, _x.SpeedMode, _x.LeftBrake, _x.RightBrake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Stamp is None:
        self.Stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Seq, _x.Stamp.secs, _x.Stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Frame_ID = str[start:end].decode('utf-8')
      else:
        self.Frame_ID = str[start:end]
      _x = self
      start = end
      end += 11
      (_x.Throttle, _x.SteeringAngle, _x.SpeedMode, _x.LeftBrake, _x.RightBrake,) = _struct_2f3B.unpack(str[start:end])
      self.Stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2f3B = struct.Struct("<2f3B")
